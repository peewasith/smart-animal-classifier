import streamlit as st
from tensorflow.keras.models import model_from_json
from tensorflow.keras.preprocessing import image
from keras.applications import vgg16
import numpy as np
import os
import gdown

# ==============================
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit
# ==============================
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞",
    page_icon="üêæ",
    layout="wide"
)

# ==============================
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå model ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
# ==============================
os.makedirs("model", exist_ok=True)

# ==============================
# ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å Google Drive ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
# ==============================
model_json_path = "model/model_structure.json"
model_weights_path = "model/model.weights.h5"

# ‡πÉ‡∏ä‡πâ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ö‡∏ö uc?id= ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö gdown
JSON_FILE_ID = "1zPDPfB0LKsXZHoog4m_9BRUWVr7HFkHI"
H5_FILE_ID   = "12Xc4HEky4W68UxyZVDvsBGAkyeR_OyHK"

if not os.path.exists(model_json_path) or not os.path.exists(model_weights_path):
    st.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
    gdown.download(f"https://drive.google.com/uc?id={JSON_FILE_ID}", model_json_path, quiet=False)
    gdown.download(f"https://drive.google.com/uc?id={H5_FILE_ID}", model_weights_path, quiet=False)
    st.success("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

# ==============================
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å structure + weights
# ==============================
with open(model_json_path, "r") as f:
    model_structure = f.read()

model = model_from_json(model_structure)
model.load_weights(model_weights_path)

# ‡πÇ‡∏°‡πÄ‡∏î‡∏• VGG16 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö extract features
feature_model = vgg16.VGG16(weights='imagenet', include_top=False, input_shape=(224,224,3))

# ==============================
# ‡∏ä‡∏∑‡πà‡∏≠ class
# ==============================
classes = ["‡∏ô‡∏Å", "‡πÅ‡∏°‡∏ß", "‡∏™‡∏∏‡∏ô‡∏±‡∏Ç"]

# ==============================
# Header
# ==============================
st.markdown("<h1 style='text-align: center; color: #4B0082;'>üêæ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; color: gray;'>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ô‡∏Å ‡πÅ‡∏°‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏∏‡∏ô‡∏±‡∏Ç ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!</p>", unsafe_allow_html=True)
st.markdown("---")

# ==============================
# Upload ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
# ==============================
uploaded_files = st.file_uploader(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ)", 
    type=["jpg","jpeg","png"], 
    accept_multiple_files=True
)

if uploaded_files:
    cols = st.columns(len(uploaded_files))
    for i, uploaded_file in enumerate(uploaded_files):
        with cols[i]:
            st.image(uploaded_file, caption="‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)

            # preprocess image
            img = image.load_img(uploaded_file, target_size=(224,224))
            img_array = image.img_to_array(img)
            img_array = np.expand_dims(img_array, axis=0)
            img_array = vgg16.preprocess_input(img_array)

            # extract features + predict
            features = feature_model.predict(img_array)
            results = model.predict(features)

            predicted_class = np.argmax(results)
            predicted_name = classes[predicted_class]
            confidence = float(results[0][predicted_class])  # convert to float

            st.markdown(f"<h3 style='text-align: center; color: #4B0082;'>{predicted_name}</h3>", unsafe_allow_html=True)
            st.progress(confidence)  # st.progress ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö float 0-1
            st.caption(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {confidence*100:.2f}%")
